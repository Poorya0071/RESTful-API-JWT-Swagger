swagger: "2.0"
info:
  description: "This is a simple API for managing TODOs."
  version: "1.0.0"
  title: "TODO API"

host: "localhost:3000"
basePath: "/"

schemes:
- "http"

securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "JWT Authorization header using the Bearer scheme. Example: 'Bearer {token}'"

security:
  - Bearer: []

paths:
  /todos:
    get:
      summary: "Gets a list of all todos"
      security:
        - Bearer: []
      responses:
        200:
          description: "A list of todos"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Todo"
    post:
      summary: "Creates a new todo"
      security:
        - Bearer: []
      parameters:
      - in: "body"
        name: "body"
        description: "Todo object that needs to be added to the list"
        required: true
        schema:
          $ref: "#/definitions/Todo"
      responses:
        default:
          description: "Successful operation"
  /todos/{id}:
    get:
      summary: "Finds todo by ID"
      security:
        - Bearer: []
      parameters:
      - name: "id"
        in: "path"
        description: "ID of todo that needs to be fetched"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Todo"
        404:
          description: "Todo not found"
    put:
      summary: "Updates a todo"
      security:
        - Bearer: []
      parameters:
      - name: "id"
        in: "path"
        description: "ID of todo that needs to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated name of the todo"
        required: true
        schema:
          $ref: "#/definitions/Todo"
      responses:
        default:
          description: "Successful operation"
    delete:
      summary: "Deletes a todo"
      security:
        - Bearer: []
      parameters:
      - name: "id"
        in: "path"
        description: "ID of todo to delete"
        required: true
        type: "integer"
      responses:
        default:
          description: "Successful operation"
  /login:
    post:
      summary: "User login"
      description: "Login with username and password to receive a JWT token."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Username and password"
          required: true
          schema:
            type: "object"
            required:
              - "username"
              - "password"
            properties:
              username:
                type: "string"
              password:
                type: "string"
      responses:
        200:
          description: "Successful login"
          schema:
            type: "object"
            properties:
              accessToken:
                type: "string"
        400:
          description: "Invalid username or password"

definitions:
  Todo:
    type: "object"
    required:
    - "id"
    - "task"
    properties:
      id:
        type: "integer"
        format: "int64"
      task:
        type: "string"
      completed:
        type: "boolean"

